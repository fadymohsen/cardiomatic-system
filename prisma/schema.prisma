generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String       @id @default(uuid())
  name           String
  ssn            Int          @unique
  contactInfo    String
  gender         String
  age            Int
  email          String       @unique
  password       String
  MedicalHistory String       @default("")
  role           Role         @default(Patient)
  patient        Patient?     @relation(fields: [patientId], references: [patientId])
  patientId      String?
  pcp            PCP?         @relation(fields: [pcpId], references: [pcpId])
  pcpId          String?
  admin          Admin?       @relation(fields: [adminId], references: [adminId])
  adminId        String?
}

model Patient {
  patientId      String          @id @default(uuid())
  name         String
  ssn          Int        @unique
  contactInfo  String
  gender       String
  age          Int
  email        String     @unique
  password     String
  MedicalHistory String
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  invoices       Invoice[]
  user           User[]
  role           Role            @default(Patient)
}

model PCP {
  pcpId    String           @id @default(uuid())
 name         String
  ssn          Int        @unique
  contactInfo  String
  gender       String
  age          Int
  email        String     @unique
  password     String
  role           Role             @default(PCP)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  invoices       Invoice[]
  user           User[]
  prescriptions  Prescription[]
}


model Admin {
  adminId      String   @id @default(uuid())
  name         String
  ssn          Int        @unique
  contactInfo  String
  gender       String
  age          Int
  email        String     @unique
  password     String
  user         User[]
}

model Appointment {
  appointmentId String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  patient       Patient   @relation(fields: [patientId], references: [patientId])
  patientId     String
  pcp           PCP       @relation(fields: [pcpId], references: [pcpId])
  pcpId         String
}

model MedicalRecord {
  recordId             String         @id @default(uuid())
  patient              Patient        @relation(fields: [patientId], references: [patientId])
  patientId            String
  pcp                  PCP            @relation(fields: [pcpId], references: [pcpId])
  pcpId                String
  date                 DateTime       @default(now())
  symptoms             String
  allergies            String
  currentSmokingStatus String
  alcoholIntake        Boolean
  diagnosis            String
  treatmentPlan        String
  prescriptions        Prescription[]
  diagnoses            Diagnosis[]
  tests                Test[]
  treatments           Treatment[]
}

model Prescription {
  prescriptionId String        @id @default(uuid())
  title          String
  date           DateTime      @default(now())
  createdBy      PCP           @relation(fields: [pcpId], references: [pcpId])
  pcpId          String
  record         MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId       String
  medication     String
  dosage         String
  frequency      String
}

model Diagnosis {
  diagnosisId String        @id @default(uuid())
  record      MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId    String
  description String
  severity    String
}

model Test {
  testId       String        @id @default(uuid())
  record       MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId     String
  typeOfTest   String
  result       String
  date         DateTime
}

model Treatment {
  treatmentId String        @id @default(uuid())
  record      MedicalRecord @relation(fields: [recordId], references: [recordId])
  recordId    String
  type        String
  description String
}

model Invoice {
  invoiceId   String    @id @default(uuid())
  patient     Patient   @relation(fields: [patientId], references: [patientId])
  patientId   String
  pcp         PCP       @relation(fields: [pcpId], references: [pcpId])
  pcpId       String
  invoiceDate DateTime  @default(now())
  amount      Float
  description String
}

enum Role {
  Patient
  PCP
  Admin
}
