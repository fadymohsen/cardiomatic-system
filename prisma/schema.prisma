generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String          @id @default(uuid())
  firstName      String?
  lastName       String?
  email          String          @unique
  password       String
  gender         String
  dateOfBirth    String?
  // Customized Attributes
  MedicalHistory String?         @default("")
  appointment    Appointment[]
  medicalRecords MedicalRecord[]
  prescription   Prescription[]
  //Roles
  role           Role            @default(Patient)
  patient        Patient?        @relation(fields: [patientId], references: [patientId])
  patientId      String?
  pcp            PCP?            @relation(fields: [pcpId], references: [pcpId])
  pcpId          String?
  admin          Admin?          @relation(fields: [adminId], references: [adminId])
  adminId        String?
}

model Patient {
  patientId      String          @id @default(uuid())
  firstName      String?
  lastName       String?
  email          String          @unique
  password       String
  gender         String
  dateOfBirth    String?
  MedicalHistory String
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  prescription   Prescription[]
  bills          Bill[]
  user           User[]
  role           Role            @default(Patient)
}

model PCP {
  pcpId          String          @id @default(uuid())
  firstName      String?
  lastName       String?
  email          String          @unique
  password       String
  gender         String
  dateOfBirth    String?
  role           Role            @default(PCP)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  prescription   Prescription[]
  user           User[]
}

model Admin {
  adminId      String        @id @default(uuid())
  firstName    String?
  lastName     String?
  email        String        @unique
  password     String
  gender       String
  dateOfBirth  String?
  appointments Appointment[]
  user         User[]
}

model Appointment {
  id           String            @id @default(uuid())
  scheduledAt  DateTime          @default(now()) @updatedAt
  status       AppointmentStatus @default(UPCOMING)
  patientName  String            @default("")
  doctorName   String            @default("")
  patient      Patient           @relation(fields: [patientId], references: [patientId])
  patientId    String
  doctor       PCP               @relation(fields: [doctorId], references: [pcpId])
  doctorId     String
  user         User?             @relation(fields: [userId], references: [userId])
  userId       String?
  Admin        Admin?            @relation(fields: [adminAdminId], references: [adminId])
  adminAdminId String?
}

model MedicalRecord {
  id               String   @id @default(uuid())
  date             DateTime
  diseases         String[]
  allergies        String[]
  smokingStatus    String
  alcoholIntake    String
  doctor           PCP      @relation(fields: [doctorId], references: [pcpId])
  doctorId         String
  scheduledAt      DateTime
  user             User?    @relation(fields: [userId], references: [userId])
  userId           String?
  Patient          Patient? @relation(fields: [patientPatientId], references: [patientId])
  patientPatientId String?
}

model Prescription {
  id               String   @id @default(uuid())
  date             DateTime @default(now()) @updatedAt()
  diseases         String[]
  medications      String[]
  title            String?
  createdBy        String?
  doctor           PCP      @relation(fields: [doctorId], references: [pcpId])
  doctorId         String
  scheduledAt      DateTime
  user             User?    @relation(fields: [userId], references: [userId])
  userId           String?
  Patient          Patient? @relation(fields: [patientPatientId], references: [patientId])
  patientPatientId String?
}

model Bill {
  billId       String        @id @default(uuid())
  amount       Float
  method       PaymentMethod
  creditNumber String?
  status       String        @default("unpaid")
  patient      Patient       @relation(fields: [patientId], references: [patientId])
  patientId    String
}

enum Role {
  Patient
  PCP
  Admin
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
}

enum AppointmentStatus {
  PREVIOUS
  UPCOMING
}
