generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String          @id @default(uuid())
  name           String
  ssn            Int             @unique
  contactInfo    String
  gender         String
  age            Int
  email          String          @unique
  password       String
  // Customized Attributes
  MedicalHistory String?         @default("")
  appointment    Appointment[]
  medicalRecords MedicalRecord[]
  //Roles
  role           Role            @default(Patient)
  patient        Patient?        @relation(fields: [patientId], references: [patientId])
  patientId      String?
  pcp            PCP?            @relation(fields: [pcpId], references: [pcpId])
  pcpId          String?
  admin          Admin?          @relation(fields: [adminId], references: [adminId])
  adminId        String?
}

model Patient {
  patientId      String          @id @default(uuid())
  name           String
  ssn            Int             @unique
  contactInfo    String
  gender         String
  age            Int
  email          String          @unique
  password       String
  MedicalHistory String
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  user           User[]
  role           Role            @default(Patient)
}

model PCP {
  pcpId          String          @id @default(uuid())
  name           String
  ssn            Int             @unique
  contactInfo    String
  gender         String
  age            Int
  email          String          @unique
  password       String
  role           Role            @default(PCP)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  user           User[]
}

model Admin {
  adminId      String        @id @default(uuid())
  name         String
  ssn          Int           @unique
  contactInfo  String
  gender       String
  age          Int
  email        String        @unique
  password     String
  appointments Appointment[]
  user         User[]
}

model Appointment {
  id           String   @id @default(uuid())
  scheduledAt  DateTime
  patient      Patient  @relation(fields: [patientId], references: [patientId])
  patientId    String
  doctor       PCP      @relation(fields: [doctorId], references: [pcpId])
  doctorId     String
  user         User?    @relation(fields: [userId], references: [userId])
  userId       String?
  Admin        Admin?   @relation(fields: [adminAdminId], references: [adminId])
  adminAdminId String?
}

model MedicalRecord {
  id               Int      @id @default(autoincrement())
  date             DateTime
  diseases         String[]
  allergies        String[]
  smokingStatus    Boolean
  alcoholIntake    Boolean
  doctor           PCP      @relation(fields: [doctorId], references: [pcpId])
  doctorId         String
  scheduledAt      DateTime
  user             User?    @relation(fields: [userId], references: [userId])
  userId           String?
  Patient          Patient? @relation(fields: [patientPatientId], references: [patientId])
  patientPatientId String?
}

enum Role {
  Patient
  PCP
  Admin
}
